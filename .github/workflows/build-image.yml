name: Build Quartz64 Images
on:
 - push
 - workflow_dispatch
jobs:
  build_uboot_quartz:
    strategy:
      matrix:
        boards: [
          {
            name: "Quartz64 Model A",
            uboot-config: "quartz64-a-rk3566_defconfig",
            uboot-name: "quartz64a"
          },
          {
            name: "Quartz64 Model B",
            uboot-config: "quartz64-b-rk3566_defconfig",
            uboot-name: "quartz64b"
          },
          {
            name: "SOQuartz",
            uboot-config: "soquartz-rk3566_defconfig",
            uboot-name: "soquartz"
          },
          {
            name: "EVB",
            uboot-config: "evb-rk3568_defconfig",
            uboot-name: "evb-rk3568"
          },
        ]
    runs-on: ubuntu-22.04
    steps:
      - name: Install toolchain
        run: |
            sudo apt-get update
            sudo apt-get install build-essential crossbuild-essential-arm64 device-tree-compiler
      #- name: Clone rkbin repository
      #  uses: actions/checkout@v3
      #  with:
      #    repository: 'rockchip-linux/rkbin'
      #    path: 'rkbin'
      - name: Clone u-boot repository
        uses: actions/checkout@v3
        with:
          repository: 'CounterPillow/u-boot-quartz64'
          ref: 'deploy'
          path: 'u-boot'
      - name: Clean u-boot
        run: |
          cd u-boot
          make mrproper
          cd ..
      - name: Fetch old rkbins
        run: |
          wget -q https://github.com/rockchip-linux/rkbin/blob/1ea59cc63be187cec53fc167e729bd0c738f9637/bin/rk35/rk3568_bl31_v1.43.elf?raw=true -O u-boot/bl31.elf
          wget -q https://github.com/rockchip-linux/rkbin/blob/70a4b3fc75053d10a2718a75591a2fe998a207de/bin/rk35/rk3566_ddr_1056MHz_v1.18.bin?raw=true -O u-boot/ram_init.bin
      - name: Build u-boot
        run: |
          cd u-boot
          make ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- ${{ matrix.boards.uboot-config }}
          make ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc)
      - name: Archive u-boot artifacts
        uses: actions/upload-artifact@v3
        with:
          name: u-boot-${{ matrix.boards.uboot-name }}
          path: |
            u-boot/u-boot.itb
            u-boot/idbloader.img
  build_uboot_rockpro:
    strategy:
      matrix:
        boards: [
          {
            name: "Rockpro64",
            uboot-config: "rockpro64-rk3399_defconfig",
            uboot-name: "rockpro64"
          }
        ]
    runs-on: ubuntu-22.04
    steps:
      - name: Install toolchain
        run: |
            sudo apt-get update
            sudo apt-get install build-essential crossbuild-essential-arm64 gcc-arm-none-eabi device-tree-compiler python3-pyelftools
      - name: Clone ARM trusted firmwarer repository
        uses: actions/checkout@v3
        with:
          repository: 'ARM-software/arm-trusted-firmware'
          path: 'arm-trusted-firmware'
      - name: Build firmware
        run: |
          cd arm-trusted-firmware
          git rm '*.bin'
          make -j$(nproc) PLAT=rk3399 CROSS_COMPILE=aarch64-linux-gnu- bl31
          cd ..
      - name: Clone u-boot repository
        uses: actions/checkout@v3
        with:
          repository: 'u-boot/u-boot'
          path: 'u-boot'
      - name: Clean u-boot
        run: |
          cd u-boot
          make mrproper
      - name: Fetch old rkbins
        run: |
          wget -q https://github.com/JeffyCN/rockchip_mirrors/blob/6186debcac95553f6b311cee10669e12c9c9963d/bin/rk33/rk3399_bl31_v1.35.elf?raw=true -O u-boot/bl31.elf
          wget -q https://github.com/rockchip-linux/rkbin/blob/a4c6de9ea29f275bb1d08c94ccded51ff2ab5b92/bin/rk33/rk3399_ddr_933MHz_v1.27.bin?raw=true -O u-boot/ram_init.bin
      - name: Build u-boot
        run: |
          cd u-boot
          make ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- BL31=bl31.elf ${{ matrix.boards.uboot-config }}
          make ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- BL31=bl31.elf -j$(nproc)
      - name: Archive u-boot artifacts
        uses: actions/upload-artifact@v3
        with:
          name: u-boot-${{ matrix.boards.uboot-name }}
          path: |
            u-boot/u-boot.itb
            u-boot/idbloader.img
  build_image:
    strategy:
      matrix:
        boards: [
          {
            name: "Quartz64 Model A",
            debos-yaml: "quartz/quartz64a.yaml",
            uboot-name: "quartz64a"
          },
          {
            name: "Quartz64 Model B",
            debos-yaml: "quartz/quartz64b.yaml",
            uboot-name: "quartz64b"
          },
          {
            name: "SOQuartz CM4 IO Board",
            debos-yaml: "quartz/soquartz-cm4.yaml",
            uboot-name: "soquartz"
          },
          {
            name: "SOQuartz Blade",
            debos-yaml: "quartz/soquartz-blade.yaml",
            uboot-name: "soquartz"
          },
          {
            name: "SOQuartz Model A",
            debos-yaml: "quartz/soquartz-model-a.yaml",
            uboot-name: "soquartz"
          },
          {
            name: "Rockpro64",
            debos-yaml: "rockpro/rockpro.yaml",
            uboot-name: "rockpro64"
          },
          {
            name: "Radxa CM3",
            debos-yaml: "rock-3/cm3raspcm4io.yaml",
            uboot-name: ""
          },
        ]
    runs-on: ubuntu-22.04
    needs:
      - build_uboot_quartz
      - build_uboot_rockpro
    env:
      GOPATH: /opt/src/gocode
    steps:
      - name: Clone workflow repository
        uses: actions/checkout@v3
      - name: Download u-boot artifacts
        uses: actions/download-artifact@v3
        if: matrix.boards.uboot-name != ''
        with:
          name: u-boot-${{ matrix.boards.uboot-name}}
          path: debos-recipes/u-boot/
      - name: Install debos dependencies
        run: |
          sudo apt-get update
          sudo apt-get install golang git libglib2.0-dev libostree-dev \
                               qemu-system-x86 qemu-user-static debootstrap \
                               systemd-container
      - name: Install debos
        run: go install -v github.com/go-debos/debos/cmd/debos@latest
      - name: Build ${{ matrix.boards.name }} Image
        run: sudo /opt/src/gocode/bin/debos --disable-fakemachine debos-recipes/${{ matrix.boards.debos-yaml }}
      - name: Archive image artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.boards.name }} Image
          path: |
            *.img.xz
  do_release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs:
      - build_image
    steps:
      - name: Clone workflow repository
        uses: actions/checkout@v3
      - name: Download image artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/
      - name: Make release
        uses: softprops/action-gh-release@v0.1.15
        with:
          files: |
            artifacts/**/citadel-os*.img.xz
